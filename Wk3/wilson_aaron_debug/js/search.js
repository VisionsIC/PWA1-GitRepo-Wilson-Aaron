/* FULL SAIL UNIVERSITY ****************************** * STUDENT: Aaron Robert Wilson * STUDENT ID: 004619821 * Search & Debug - [FIXED]- Week 3 * Assignment 3 - Part 3 of 3 of this series * Date: 02/13/15 */// Create privatized scope using a self-executing function(function(){		// Variable initialization (DO NOT FIX ANY OF THE BELOW VAR's)	var resultsDIV = document.getElementById("results"), // Create a variable called "resultsDIV". This variable searches the HTML code in index.html for a DIV tag named resultsDIV.		searchInput = document.forms[0].search, // This line of code called "SearchInput" is searching the HTML code in index.html for a FORM tag named "search".		currentSearch = '' // This line of code called "CurrentSearch" is attempting to analyze user current search input.	;		// Validates search query	var validqte = function(query){ // creates a function with a parameter of query. FIXED error double "equal" to single "equal".        /* AT THIS POINT IN THE JAVASCRIPT CODE A LOOP IS CREATED. */		// Trim whitespace from start and end of search query		while(query.charAt(0) === " "){ // "While" tells javascript to "display nothing" if if the "query" function statement "charAt" is "0" characters or empty. FIXED single "equal" sign to triple "equal" sign because it's a comparison in a loop, not a variable.			query = query.substring(1, query.length); // function "query" equals query.substring statement with a parameter sum of "1" character or the query.length statement.		};		while(query.charAt(query.length-1) === "") { // "While" tells javascript to "display nothing" if if the "query" function statement "charAt" has a parameter of "query.length" statement minus the sum of "1". Then it is equal to "0" characters or empty.            query = query.substring(0, query.length - 1); // function "query" equals query.substring statement with a parameter sum of "0" character or the query.lenth statement minus the sum of "1".        }; // ADDRESSED or FIXED CLOSURE syntax error below by adding a closing curly brace to the floating closing semi-colon.				// Check search length, must have 3 characters		if(query.length < 3){ // If statement with the parameters of query.length are less than the sum of 3, do something as seen below.			alert("Your search query is too small, try again."); // the above "if" instructs javascript to display an alert box with the aforementioned string, if the user enters less than 3 characters. FIXED String error, closed quotes in this string.						// (DO NOT FIX THE LINE DIRECTLY BELOW)			searchInput.focus(); // This line is calling the searchInput variable ??? to direct it's "focus" on the "forms" HTML tag, and the length of the users character entry into the search box.			return; // Stops javascript execution to "return" a query based on user input.		};				search(query); // This line of code executes a "search" of that user input with the parameter of "query".	};		// Finds search matches	var search = function(query) { // A variable called "search" is created with a function that has a parameter of "query". FIXED syntax error by adding a opening curly brace.				// split the user's search query string into an array		var queryArray = query.split(" "); // fixed error that attempted to use the "join" method. Instead we have to "split" the Array.				// array to store matched results from database.js		var results = []; // An empty variable "array" called "results" is created.		// loop through each index of db array		for(var i=0, j=db.length; i<j; i++) { // A for loop is created with a variable of "i" that is "equal" to the sum of "zero", and a variable of "j" to which is greater than "i".            // each db[i] is a single video item, each title ends with a pipe "|"            // save a lowercase variable of the video title            var dbTitleEnd = db[i].indexOf('|');            var dbitem = db[i].toLowerCase().substring(0, dbTitleEnd); // Fixed error with ".tolowercase" method that needed to be camel cased.            // loop through the user's search query words            // save a lowercase variable of the search keyword            for (var ii = 0, jj = queryArray.length; ii < jj; ii++) {                var qitem = queryArray[ii].toLowerCase(); // Fixed error with ".tolowercase" method that needed to be camel cased.                // is the keyword anywhere in the video title?                // If a match is found, push full db[i] into results array                var compare = dbitem.indexOf(qitem);                if (compare !== -1) {                    results.push(db[i]);                };            }; // ADDRESSED or FIXED CLOSURE syntax error below by adding a closing curly brace to the floating closing semi-colon.        }; // ADDRESSED or FIXED CLOSURE syntax error below by adding a closing curly brace to the floating closing semi-colon.				results.sort();				// Check that matches were found, and run output functions		if(results.length === 0){ // Fixed error because we are comparing not defining.			noMatch();		}else{			showMatches(results);		};	};		// Put "No Results" message into page (DO NOT FIX THE HTML VAR NOR THE innerHTML)	var noMatch = function(){		var html = ''+			'<p>No Results found.</p>'+			'<p style="font-size:10px;">Try searching for "JavaScript".  Just an idea.</p>'		;		resultsDIV.innerHTML = html;	};		// Put matches into page as paragraphs with anchors	var showMatches = function(results){				// THE NEXT 4 LINES ARE CORRECT.		var html = '<p>Results</p>', 			title, 			url		;				// loop through all the results search() function		for(var i=0, j=results.length; i<j; i++){					// title of video ends with pipe			// pull the title's string using index numbers			titleEnd = results[i].indexOf('|');			title = results[i].substring(0, titleEnd); // Error fixed "substring" should not be camel case.						// pull the video url after the title			url = results[i].substring(results[i].indexOf('|')+1, results[i].length);						// make the video link - THE NEXT LINE IS CORRECT.			html += '<p><a href=' + url + '>' + title + '</a></p>';		};		resultsDIV.innerHTML = html; //THIS LINE IS CORRECT.	};		// The onsubmit event will be reviewed in upcoming Course Material.	// THE LINE DIRECTLY BELOW IS CORRECT	document.forms[0].onsubmit = function(){		var query = searchInput.value;		validqte(query);        // return false is needed for most events - this will be reviewed in upcoming course material        // THE LINE DIRECTLY BELOW IS CORRECT		return false;	}; // ADDRESSED or FIXED CLOSURE syntax error below by adding a closing curly brace to the floating closing semi-colon.})();